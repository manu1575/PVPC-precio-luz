name: Procesar PVPC con PDF y log

on:
  schedule:
    - cron: "53 22 * * *"  # Ejecutar todos los días a las 23:35 UTC
  push:
    branches:
      - main

jobs:
  procesar_archivo:
    runs-on: ubuntu-latest

    steps:
    # 0. Debug: listar archivos
    - name: Listar archivos y carpetas
      run: ls -R

    # 1. Clonar repositorio
    - name: Clonar repositorio
      uses: actions/checkout@v3

    # 2. Instalar dependencias
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install requests openpyxl pdfkit pandas

    # 3. Crear carpetas necesarias
    - name: Crear carpetas
      run: |
        mkdir -p downloads
        mkdir -p outputs/logs

    # 4. Crear log de ejecución
    - name: Crear archivo de log
      run: echo "Inicio del workflow $(date)" > outputs/logs/log-$(date +'%Y%m%d').txt

    # 5. Descargar archivo .xls
    - name: Descargar archivo .xls
      run: |
        python ./Descarga-REE.py >> outputs/logs/log-$(date +'%Y%m%d').txt 2>&1

    # 6. Convertir .xls a .xlsx
    - name: Convertir .xls a .xlsx
      run: |
        python ./convertir_xls_a_xlsx.py >> outputs/logs/log-$(date +'%Y%m%d').txt 2>&1

    # 7. Procesar datos
    - name: Procesar datos
      run: |
        python ./procesar_datos.py >> outputs/logs/log-$(date +'%Y%m%d').txt 2>&1

    # 8. Generar PDF
    - name: Generar PDF
      run: |
        python ./generar_pdf.py >> outputs/logs/log-$(date +'%Y%m%d').txt 2>&1

    # 9. Guardar PDF con fecha
    - name: Mover PDF final
      run: |
        mkdir -p outputs
        mv output.pdf outputs/output-$(date +'%Y%m%d').pdf
        echo "PDF generado correctamente" >> outputs/logs/log-$(date +'%Y%m%d').txt

    # 10. Subir PDF y log al repositorio
    - name: Subir PDF y log
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add outputs/
        git commit -m "Añadir PDF y log del $(date +'%Y%m%d')" || echo "No hay cambios para subir"
        git push origin main

    # 11. Enviar PDF por email
    - name: Enviar PDF por email
      env:
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
      run: |
        python ./enviar_email.py >> outputs/logs/log-$(date +'%Y%m%d').txt 2>&1

    # 12. Limpiar archivos temporales
    - name: Limpiar archivos temporales
      run: |
        rm -f downloads/*.xls
        rm -f downloads/*.xlsx
        rm -f output.pdf
        echo "Archivos temporales eliminados" >> outputs/logs/log-$(date +'%Y%m%d').txt

