name: PVPC Diario - Descarga, PDF y Email

on:
  schedule:
    - cron: "04 23 * * *"  # Ejecutar todos los días a las 23:35 UTC
  push:
    branches:
      - main

jobs:
  ejecutar_flujo:
    runs-on: ubuntu-latest

    steps:
    # 1. Clonar repositorio
    - uses: actions/checkout@v3

    # 2. Instalar dependencias
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas openpyxl xlrd pdfkit

    # 3. Crear carpeta downloads
    - name: Crear carpeta downloads
      run: mkdir -p downloads

    # 4. Descargar archivo .xls
    - name: Descargar archivo .xls
      run: python ./Descarga-REE.py

    # 5. Convertir .xls a .xlsx
    - name: Convertir a .xlsx
      run: python ./convertir_xls_a_xlsx.py

    # 6. Procesar datos
    - name: Procesar datos
      run: python ./procesar_datos.py

    # 7. Generar PDF
    - name: Generar PDF
      run: python ./generar_pdf.py

    # 8. Subir PDF al repositorio (opcional)
    - name: Subir PDF
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        mkdir -p outputs
        mv output.pdf outputs/output-$(date +'%Y%m%d').pdf
        git add outputs/
        git commit -m "PDF generado automáticamente $(date +'%Y%m%d')" || echo "No hay cambios para subir"
        git push origin main

    # 9. Enviar PDF por email
    - name: Enviar PDF por email
      env:
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
      run: python ./enviar_email.py

    # 10. Limpiar archivos temporales
    - name: Limpiar archivos temporales
      run: |
        rm -f downloads/*.xls
        rm -f downloads/*.xlsx
        rm -f output.pdf


